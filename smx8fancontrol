#!/usr/bin/env python
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import sys
from smbus import SMBus
from contextlib import contextmanager

# 
# All register ceom from
# https://github.com/torvalds/linux/blob/5924bbecd0267d87c24110cbe2041b5075173a25/drivers/hwmon/w83795.c
#

ADDRESS=0x2f

NUVOTON_VENDOR_ID = 0xa3
CHIP_ID = 0x79

W83795_REG_BANKSEL = 0x00

# Fan Control Mode Selection Registers (FCMS)
W83795_REG_FCMS1 = 0x201
W83795_REG_FCMS2 = 0x208
W83795_REG_TFMR = lambda index: 0x202 + index
W83795_REG_TSS = lambda index: 0x209 + index

W83795_REG_SFIV_TEMP = lambda index: range(0x280 + index * 0x10, 0x280 + index * 0x10 + 7)
W83795_REG_SFIV_DCPWM = lambda index: range(0x288 + index * 0x10, 0x288 + index * 0x10 + 7)

W83795_REG_CTFS = lambda index: 0x268 + index

#Fan Output PWM Frequency Prescalar (FOPFP)
W83795_REG_FOPFP = lambda index: 0x218 + index
#Fan Output Nonstop Value (FONV)
W83795_REG_FONV = lambda index: 0x228 + index


@contextmanager
def bank(bus, value):
  prev_value = w83795_set_bank(bus, value)
  yield
  w83795_set_bank(bus, prev_value)


def w83795_set_bank(bus, bank):
  assert bank in [0,1,2,3]
  # Read current bank value
  cur_bank = bus.read_byte_data(ADDRESS, W83795_REG_BANKSEL)
  # If the bank is already set, nothing to do
  if cur_bank == bank:
    return cur_bank
  # Change the bank
  bus.write_byte_data(ADDRESS, W83795_REG_BANKSEL, bank)
  # Return previous bank value
  return cur_bank


def w83795_write(bus, reg, value):
  """
  Write into the given registry.
  """
  with bank(bus, reg >> 8):
    return bus.write_byte_data(ADDRESS, reg & 0xff, value & 0xff)


def w83795_read(bus, reg):
  """
  Read the given registry.
  """
  
  if hasattr(reg, '__iter__'):
      with bank(bus, reg[0] >> 8):
        return map(lambda r: bus.read_byte_data(ADDRESS, r & 0xff), reg)
  with bank(bus, reg >> 8):
    return bus.read_byte_data(ADDRESS, reg & 0xff)


def to_degree(val, low=0, hi=127):
  """Convert hex value to degree."""
  return 127 * val / 255


def to_perc(value):
  """Convert hex value to percentage."""
  return value * 100 / 255


def from_perc(value):
  """Convert perc to hex"""
  return (value * 255 / 100) & 0xff


def main():
  # Read arguments
  args = sys.argv
  pwm_value = None
  if len(args)>1:
    pwm_value = int(args[1])

  #Check if we have the right device.
  try:
    # Open SMBus
    try:
      bus = SMBus(0)
    except:
      print("Failed to open i2c bus (/dev/i2d-0). Make sure i2c-dev module is loaded.")
      return

    vendor = w83795_read(bus, 0xfd)
    chipid = w83795_read(bus, 0xfe)
    #debug("vendor %s, chipid %s" % (vendor, chipid))
    if vendor != NUVOTON_VENDOR_ID or chipid != CHIP_ID:
      print("unexpected vendor %s, chipid %s" % (vendor, chipid))
      return

    # Check if Smarts Fan Control is enabled
    fcms1 = w83795_read(bus, W83795_REG_FCMS1)
    fcms2 = w83795_read(bus, W83795_REG_FCMS2) & 0xf
    #debug("FCMDS1: %s, FCMS2: %s" % (fcms1, fcms2))
    if fcms1 !=0 and fcms2 == 0:
      print("Smart Fan Control is not enabled")
      return
    # Extract TEMP with Smart Fan Enabled
    temps = [i for i in range(0,6) if fcms2 & (0x1<<i)]

    # Set the registry value
    if pwm_value:
      print("Set minimum PWM to %s%%" % pwm_value)
      # Change Smart Fan Control value
      for t in temps:
        w83795_write(bus, W83795_REG_SFIV_DCPWM(t)[0], from_perc(pwm_value))
      # Change Minimum PWM
      for f in range(0,6):
        w83795_write(bus, W83795_REG_FONV(f), from_perc(pwm_value))

    for t in temps:
      print("Temp%s:" % (t + 1))
      print("  Smart Fan Control Table (SFIV)")
      temp = w83795_read(bus, W83795_REG_SFIV_TEMP(t))
      print(''.join([("%sC" % to_degree(v)).rjust(6) for v in temp]))

      dcpwm = w83795_read(bus, W83795_REG_SFIV_DCPWM(t))
      print(''.join([("%s%%" % to_perc(v)).rjust(6) for v in dcpwm]))
      print('')

    for f in range(0,6):
      print("Fan%s" % (f+1))
      fonv = w83795_read(bus, W83795_REG_FONV(t))
      print("  Fan Output Nonstop Value (FONV): %s%%" % to_perc(fonv))

    #for t in range(0,6):
    #  ctfs = w83795_read(bus, W83795_REG_CTFS(t))
    #  print("T%sCTFS: %s" % (t, to_degree(ctfs)))
    #for f in range(0,6):
    #  w83795_write(bus, W83795_REG_FONV(f), 50)

    #w83795_write(bus, W83795_REG_SFIV_DCPWM(0)[0], 50)
    #

    #w83795_write(bus, W83795_REG_SFIV_TEMP(0)[0], 85)
    #w83795_write(bus, W83795_REG_SFIV_TEMP(1)[0], 85)

  finally:
    bus.close()


if __name__ == "__main__":
    main()